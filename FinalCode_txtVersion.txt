
#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>


float Lcft[6][3] = {{90,90,90},{90,90,90},{90,90,90},{90,90,90},{90,90,90},{90,90,90}};

Adafruit_PWMServoDriver pwm1 = Adafruit_PWMServoDriver(0x40);
Adafruit_PWMServoDriver pwm2 = Adafruit_PWMServoDriver(0x41);

#define SERVOMIN 150 //0 degrees
#define SERVOMAX 600//180 degrees

uint8_t servonum = 0;
uint8_t numberOfServos = 18;
//int oldTheta = 90;

int servoAngle(int theta1){
  float result;
  result = theta1 * (450/180) + 150 + .5*theta1;
  Serial.print("SERVOANGLE: ");
  Serial.println(result);
  return result;  
}

int actuateServo(int ii, int jj, float pulse){
  if(ii == 0){
    if(jj == 0){
      pwm1.setPWM(0, 0, pulse);
    }else if(jj == 1){
      pwm1.setPWM(1, 0, pulse);
    }else if(jj == 2){
      pwm1.setPWM(2, 0, pulse);
    }
  }else if(ii == 1){
    if(jj == 0){
      pwm1.setPWM(3, 0, pulse);
    }else if(jj == 1){
      pwm1.setPWM(4, 0, pulse);
    }else if(jj == 2){
      pwm1.setPWM(5, 0, pulse);
    }
  }else if(ii == 2){
    if(jj == 0){
      pwm1.setPWM(6, 0, pulse);
    }else if(jj == 1){
      pwm1.setPWM(7, 0, pulse);
    }else if(jj == 2){
      pwm1.setPWM(8, 0, pulse);
    }
  }else if(ii == 3){
    if(jj == 0){
      pwm2.setPWM(0, 0, pulse);
    }else if(jj == 1){
      pwm2.setPWM(1, 0, pulse);
    }else if(jj == 2){
      pwm2.setPWM(2, 0, pulse);
    }
  }else if(ii == 4){
    if(jj == 0){
      pwm2.setPWM(3, 0, pulse);
    }else if(jj == 1){
      pwm2.setPWM(4, 0, pulse);
    }else if(jj == 2){
      pwm2.setPWM(5, 0, pulse);
    }
  }else if(ii == 5){
    if(jj == 0){
      pwm2.setPWM(6, 0, pulse);
    }else if(jj == 1){
      pwm2.setPWM(7, 0, pulse);
    }else if(jj == 2){
      pwm2.setPWM(8, 0, pulse);
    }
  }
}

float maximum() {
   // put your setup code here, to run once:
   int myArray[6] = {1, 5, -6, 4, -2, 7};

   int maxVal = myArray[0];
   int minVal = myArray[0];
   for (int i = 0; i < (sizeof(myArray) / sizeof(myArray[0])); i++) {
      maxVal = max(myArray[i],maxVal);
      minVal = min(myArray[i],minVal);
   }
   return maxVal;
}


int legMove(int t0, int t1, int t2, int t3, int t4, int t5, int t6, int t7, int t8, int t9, int t10, int t11, int t12, int t13, int t14, int t15, int t16, int t17){
 
  /*servoAngle(max(abs(t0-Lcft[0][0]),abs(t1-Lcft[0][1]),abs(t2-Lcft[0][2]),{abs(t3-Lcft[1][0]),
  abs(t4-Lcft[1][1]),abs(t5-Lcft[1][2]),abs(t6-Lcft[2][0]),abs(t7-Lcft[2][1]),abs(t8-Lcft[2][2]),{abs(t11-Lcft[3][0]),
  abs(t11-Lcft[3][1]),abs(t11-Lcft[3][2]),abs(t12-Lcft[4][0]),abs(t13-Lcft[4][1]),abs(t14-Lcft[4][2]),abs(t15-Lcft[5][0]),
  abs(t16-Lcft[5][1]),abs(t17-Lcft[5][2])))*/
 
  /*
  Serial.println("Starting Function");
   int maxVal = myArray[0];
   int minVal = myArray[0];
   for (int i = 0; 6 < (sizeof(myArray) / sizeof(myArray[0])); i++) {
      maxVal = max(myArray[i],maxVal);
      minVal = min(myArray[i],minVal);
   }
  for(int hh = 0; hh < max(max(max(abs(t0- Lcft[0][0]),(t1- Lcft[0][1])),(t2 - Lcft[0][2])); hh+=5){
     if(max(t0,Lcft[0][0]) == t0){
       pwm1.setPWM(0, 0, Lcft[0][0]++);
     }else if(max(t0,Lcft[0][0]) == Lcft[0][0]){
       pwm1.setPWM(0, 0, Lcft[0][0]--);
     }
     if(max(t1,Lcft[0][1]) == t1){
       pwm1.setPWM(0, 0, Lcft[0][1]++);
     }else if(max(t1,Lcft[0][1]) == Lcft[0][1]){
       pwm1.setPWM(0, 0, Lcft[0][1]--);
     }
     if(max(t2,Lcft[0][2]) == t2){
       pwm1.setPWM(2, 0, Lcft[0][2]++);
     }else if(max(t2,Lcft[0][2]) == Lcft[0][2]){
       pwm1.setPWM(0, 0, Lcft[0][2]--);
     }
     
  }*/



//  find the largest angle needed, iterate through a conditional for each motor; conditions being the direction of travel, maybe set a resolution loop for velocity syncing
}




int moveAll(int ii, int jj,float theta){
  Serial.println("Starting Function");
  if (theta < Lcft[ii][jj]){
    Serial.println("theta smaaaalll");
    for (float pulselen = servoAngle(Lcft[ii][jj]); pulselen > servoAngle(theta); pulselen-=15){
      actuateServo(ii, jj, pulselen);
    }
    Serial.println("now small");
  }
 
  else if(theta > Lcft[ii][jj]){
    Serial.println("Theta biggggg");
    for (float pulselen = servoAngle(Lcft[ii][jj]); pulselen < servoAngle(theta); pulselen+=15){
      actuateServo(ii, jj, pulselen);
    }
    Serial.println("now big");
  }
  else{
    Serial.print("Problem theta: ");
    Serial.println(theta);
    Serial.print("Problem thetaStorage: ");
    Serial.println(Lcft[ii][jj]);
    Serial.println();
   
  }
  Lcft[ii][jj] = theta;
  Serial.print("Final Stored Theta:");
  Serial.println(Lcft[ii][jj]);
}


/*int moveLegs(int t0, int t1, int t2, int t3, int t4, int t5, int t6, int t7, int t8, int t9, int t10, int t11, int t12, int t13, int t14, int t15, int t16, int t17){
  for (int ii = 0; ii<9;ii++){
    for (int jj = 0;jj<9;jj++){
        if (theta < Lcft[ii][jj]){
            for (float pulselen = servoAngle(Lcft[ii][jj]); pulselen > servoAngle(theta); pulselen-=5){
            }
        }
        else if(theta > Lcft[ii][jj]){
          for (float pulselen = servoAngle(Lcft[ii][jj]); pulselen < servoAngle(theta); pulselen+=5){
            actuateServo(ii, jj, pulselen);
          }
        }
        else{
          Serial.print("Else Statement");
        }
    }
  }
}


 
  else if(theta > Lcft[ii][jj]){
    for (float pulselen = servoAngle(Lcft[ii][jj]); pulselen < servoAngle(theta); pulselen+=5){
      actuateServo(ii, jj, pulselen);
    }
  }
  else{
    Serial.print("Else Statement");
 
  }
  Lcft[ii][jj] = theta;
  Serial.print("Final Stored Theta:");
  Serial.println(Lcft[ii][jj]);
}
*/




void setup() {
  Serial.begin(9600);
  pwm1.begin();
  pwm1.setPWMFreq(60);
  pwm2.begin();
  pwm2.setPWMFreq(60);
  delay(10);
}

void loop() {
  for(int hh = 0; hh<6;hh++){
    for( int kk =0;kk<3;kk++){
      moveAll(hh,kk,90);
      moveAll(hh,kk,90);
    }
  }
  delay(500);
  moveAll (1,1,120);
  moveAll (4,1,60);
  delay(500);
  moveAll(1,0,150);
  moveAll(4,0,30);
  delay(500);
  moveAll (1,1,90);
  moveAll (4,1,90);
  delay(500);
  moveAll(0,1,150);
  moveAll(5,1,30);
  delay(500);
  int oo = 5;
  while(oo > 0){
    moveAll(0,0,120);
    moveAll(5,0,60);
    moveAll(0,0,60);
    moveAll(5,0,120);
    oo--;    
  }
  moveAll(0,0,90);
  moveAll(5,0,90);
  moveAll(0,1,90);
  moveAll(5,1,90);
  moveAll (1,1,120);
  moveAll (4,1,60);
  for(int hh = 0; hh<6;hh++){
    for( int kk =0;kk<3;kk++){
      moveAll(hh,kk,90);
      moveAll(hh,kk,90);
    }
  }
 
}
